MEC - IT PST

Array rotation clock and anti-clock
rotation: 2
original:
    0         1         2      3             4          5          6                                                                              
[Node, Django, Vue, Express, Spring, Flask, Angular, 
    7           8
React, Hibernate]

anti-clock
Vue Express Spring Flask Angular React Hibernate Node Django

clock
React Hibernate Node Django Vue Express Spring Flask Angular



Equilibrium Index:
  0   1  2  3  4   5  6
{-7, 1, 5, 2, -4, 3, 0}	>> 0
               i
eq.index>> 3


0,-3,5,-4,-2,3,1,0
i

totalSum-= i >> 0
when partSum==totalSum
	i
partSum+=i>>



0,-3,5,-4,-2,3,1,0
eq.index>> 0

A chocolate factory is packing chocolates into packets. The chocolate packets here represent an array arrt of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array).
Input:
N = 8
arr = [1, 0, 2, 3, 0, 4, 5, 0]
Output:
[1, 2, 3, 4, 5, 0, 0, 0]

0  1  2  3  4  5  6  7
1, 2, 3, 4, 5, 4, 5, 0
                    i
                               c

c!=0
i=c

Airport security officials confiscated several items of the passengers at the security checkpoint. All the items have been dumped into a huge box (array). Each item possesses a certain amount of risk[0,1,2]. Here, the risk severity of the items represents an array[] of N number of integer values. The task here is to sort the items based on their levels of risk in the array. The risk values range from 0 to 2.
Input:
[1, 0, 2, 2, 1, 1, 2, 2, 1, 0, 2, 1, 0]
Output:
[0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]


0  1  2  3  4  5  6  7  8  9 10 11 12
1, 0, 2, 2, 1, 1, 2, 2, 1, 0, 2, 1, 0
s						 e
    m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 1, 2, 2, 1, 1, 2, 2, 1, 0, 2,  1,   0
     s						    e
        m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 2,  1,   2
     s					      e
        m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 1, 2, 1, 1, 2, 2, 1, 0, 2,  1,   2
         s				      e	      
             m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 2,  2,   2
         s				  e	      
                         m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 1, 1, 1, 1, 0, 2, 1, 2, 2,  2,   2
         s			  e	      
                         m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2,  2,   2
             s			  e	      
                             m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2,  2,   2
             s		     e	      
                             m


Finding missing min element in array
input:
0,1,3,4,5,6,7
output:
2

input:
0,2,3,5,6,7,8
output:
1

input:
0,1,2,3,4,6,7,8,9
output:
5


input:
1,2,3,4,6,7,8,9
output:
0


input:
5,10,8,11
output:
6

input:
98,454,12,86,13,89
output:
87



The Climbing Stairs problem
This is one of the most popular coding problems which can be solved using the Dynamic Programming technique. In this problem, you are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. The question is, in how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step.


Example 3:
Input: 5
Output: 8

1+1+1+1+1
2+2+1
1+2+2
2+1+2
1+1+1+2
1+1+2+1
1+2+1+1
2+1+1+1


3

poss>> 4>> 
0 1 2 3
0 1 2 3

step=4
0 1 2 3 4 
0 1 2 3 5

step=5
0 1 2 3 4 5
0 1 2 3 5 8


5
5-1		5-2
4
4-1	4-2>> 2
3
3-1	3-2
2	1>>3

5-1>> 5

3-1	3-2
2	1>> 3



1. Coin Change Problem
You are given an integer array coins representing denominations of coins and an integer amount representing the total amount of money. Your task is to determine the minimum number of coins required to make up the given amount. If it is not possible to make up the amount with the given denominations, return -1.

Constraints:

You can use as many coins of each denomination as needed.

You may assume that there are no negative denominations, and all denominations are distinct.

The input values are positive integers.


Input
coins = [1, 2, 5]  
amount = 11

Output
3

Input
coins = [1, 2, 5]  
amount = 7
Output
2



2. Given N gold wires, each wire has a length associated with it. At a time, only two adjacent small wires are assembled at the end of a large wire and the cost of forming is the sum of their length. Find the minimum cost when all wires are assembled to form a single wire.
Note: using greedy approach
Example:
input:
[1, 1, 6, 6, 7, 8]


[1, 1, 6, 6, 7, 8]
2
[1, 6, 6, 7, 8, 8] 
9
[1, 6, 7, 8, 8, 8]
16 
[1, 7, 8, 8, 8, 8]
24
[1, 8, 8, 8, 8, 8] 
33
[1, 9, 8, 8, 8, 8] 
[1, 9, 8, 8, 8, 8]
Minimum cost to assemble all gold wires: 33



3. Dimond Pattern:
        #
      ##
    ###
  ####
#####
			
    #			
  ###		
#####		
 ###
   #

4. Given an array nums of positive integers of size N. Find all distinct digits present in nums.
Example 1:
Input: nums = [131, 11, 48]
Output: 1 3 4 8
Explanation: 1, 3, 4, and 8 are only distinct
digits that can be extracted from the numbers
of the array.
Example 2:
Input: nums = [111, 222, 333, 4444, 666]
Output: 1 2 3 4 6
Explanation: 1, 2, 3, 4, and 6 are only distinct
digits that can be extracted from the numbers
of the array.

5. Given an array arr[] of positive integers. Your task is to sort them so that the first part of the array contains odd numbers sorted in descending order, and the rest of the portion contains even numbers sorted in ascending order.
Examples:
Input: arr[] = [1, 2, 3, 5, 4, 7, 10]
Output: [7, 5, 3, 1, 2, 4, 10]
Explanation: 7 5 3 1 are odds in descending order and 2 4 10 are evens in ascending order.
Input: arr[] = [0, 4, 5, 3, 7, 2, 1]
Output: [7, 5, 3, 1, 0, 2, 4]
Explanation: 7 5 3 1 are odds in descending order and 0 2 4 are evens in ascending order.



03/01/2025:
1. Given two strings A and B, find if A is a subsequence of B.

Example 1:
Input:
A = AXY 
B = YADXCP
Output: 0 
Explanation: A is not a subsequence of B
as 'Y' appears before 'A'.
 

Example 2:
Input:
A = zac
B = zealoustechcorp
Output: 1
Explanation: A is a subsequence of B.

Example 3:
Input:
A = gksrek
B = geeksforgeeks
Output: 1
Explanation: A is a subsequence of B.

Example 4:
Input:
A = zact
B = zealoustechcorp
Output: 0
Explanation: A is not a subsequence of B.



2. Find the least prime number that can be added with first array element that makes them divisible by second array elements at respective index
Input:
int[] arr1 = {3, 5, 7};
int[] arr2 = {10, 15, 20};
Explanation:
(3 + 7) % 10 == 0, (5 + 5) % 15 == 0, (7 + 13) % 20 == 0
Output:
7 -1 13 
Input:
int[] arr1 = {4, 6, 8};
int[] arr2 = {5, 10, 15};
Output:
-1 -1 7


3. Program to Convert Hexadecimal Number to Binary
Input: Hexadecimal = 1AC5
Output: Binary = 0001101011000101
Explanation:
    Equivalent binary value of 1: 0001
    Equivalent binary value of A: 1010
    Equivalent binary value of C: 1100
    Equivalent binary value of 5: 0101

Input: Hexadecimal = 5D1F
Output: Binary = 0101110100011111



4. Minimum Moves to Convert String
You are given a string s consisting of n characters which are either 'X' or 'O'.
A move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.
Return the minimum number of moves required so that all the characters of s are converted to 'O'.
Example 1:
Input: s = "XXX"
Output: 1
Explanation: XXX -> OOO
We select all the 3 characters and convert them in one move.
Example 2:
Input: s = "XXOX"
Output: 2
Explanation: XXOX -> OOOX -> OOOO
We select the first 3 characters in the first move, and convert them to 'O'.
Then we select the last 3 characters and convert them so that the final string contains all 'O's.
Example 3:
Input: s = "OOOO"
Output: 0
Explanation: There are no 'X's in s to convert.

5. You are given an array of size n - 1 that contains distinct integers in the range from 1 to n (inclusive). This array represents a permutation of the integers from 1 to n with one element missing. Your task is to identify and return the missing element.


6. Given an array of stock prices where each element represents the stock price on a specific day, write a function to find the best days to buy and sell the stock such that you achieve the maximum profit. You can only buy and sell the stock once.

45, 12, 3, 10, 50
Best time to buy 3 best time to sell 50

-10, -5, -2, -1, 1
Best time to buy -10 best time to sell 1

90, 40, 20, 10, 4
Best time to buy 10 best time to sell 4





Given an unsorted integer array, print all distinct four elements tuple (quadruplets) in it, having a given sum.

For example,
Input:
A[] = [2, 7, 4, 0, 9, 5, 1, 3]
target = 20
showing quaraplets:
Output: Below are the quadruplets with sum 20
 (0, 4, 7, 9)
(1, 3, 7, 9)
(2, 4, 5, 9)


size = 8, target = 20
[2, 7, 4, 0, 9, 5, 1, 3]

size=7, target=20-3=17		count=1
size=6, target=17-1=16		count=2
size=5, target=11			count=3
size=4, target=2			count=4
size=3, target=2			count=5

size=3, target=2			count=4
size=2, target=-2			count=5

size=2, target=2-4>>-2		count=5>> 4
size=1  target=2-7>>-5		count=6>> 4

size=1 target=2-2>> 0		count=4








Given a stack, sort it using recursion. The use of any other data structures (like containers in STL or Collections in Java) is not allowed.
For example,
Stack before sorting : 5 | -2 | 9 | -7 | 3    where 3 is the top element
Stack after sorting  : -7 | -2 | 3 | 5 | 9    where 9 is the top element




5  -2  9  -7  3

// pop till stack is empty
3
-7
9
-2
5	>> temp

push if stack is empty or current>peek:
	then insert element
otherwise
	pop the peek
	insert current
5>> peek 
-2

-2
5
9>> peek

-2
5
-7>> peek

		9	5	-2	

-7
-2
5
9>> peek

3>> 		9	5	

-7
-2
3
5
9


Jump game VI,
You are given a 0-indexed integer array nums and an integer k.
You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.
You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.
Return the maximum score you can get.
Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.
Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.
Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0




Mahesh and Suresh are playing a new game “Checkers“. This is a very simple game but becomes challenging when more expert players are playing. Below is the description of the game and rules: The game is played by 2 players. This game consists of an N*M matrix. Each of the cells is background lit by lights. And these cells are either Green or Black. The green and black cells are randomly lit and will be represented with 1’s and 0’s respectively. Green cells are the cells that need to be captured. Black cells cannot be captured. Everyone is in the race to capture the maximum number of cells possible.
In a single chance, a player can capture all those adjacent cells which share an edge. Once there is no adjacent edge the chance breaks and the next player will play.
Mahesh always starts the game and Suresh is second.
Both players are playing optimally, find out how many cells Suresh captures.
Input:
{1, 0, 1, 0, 1}, 
{1, 1, 0, 1, 1},
{0, 1, 0, 1, 0}, 
{0, 1, 1, 1, 0}, 
{1, 0, 1, 0, 1}
Output:
[7, 0, 1, 0, 2]
[6, 5, 0, 3, 1]
[0, 4, 0, 2, 0]
[0, 3, 2, 1, 0]
[1, 0, 1, 0, 1]
[1, 0, 1, 0, 1]
[2, 3, 0, 1, 2]
[0, 4, 0, 2, 0]
[0, 5, 6, 7, 0]
[1, 0, 7, 0, 1]
Suresh captures 1 cells.
Input:
{0, 1, 1},
{1, 1, 0},
{1, 0, 1}
Output:
[0, 2, 1]
[2, 1, 0]
[1, 0, 1]
[0, 1, 2]
[1, 2, 0]
[2, 0, 1]
Suresh captures 0 cells.




Heap sort:
 0   1       2       3     4   5
3.4 9.2 1.12 12.09 4.5 7.2
              3.4           
         9.2       1.12>> max | parent
     12.09 4.5   7.2

 0   1       2       3     4   5
3.4 9.2 1.12 12.09 4.5 7.2
              3.4           
         9.2       1.12>> parent
     12.09 4.5   7.2>> max


 0   1       2       3     4   5
3.4 9.2 7.2 12.09 4.5 1.12
              3.4           
         9.2       7.2
     12.09 4.5   1.12>>p|m

 0   1       2       3     4   5
3.4 9.2 7.2 12.09 4.5 1.12

	   9.2>> parent
  12.09>m 4.5

 0   1       2       3     4   5
3.4 12.09 7.2 9.2 4.5 1.12
 	  m
		3.4>> p
	12.09m	7.2

 0       1       2       3     4   5
12.09 3.4 7.2     9.2 4.5 1.12
 	  m

		3.4>>p
	9.2>m	4.5		

 0       1       2       3     4   5
12.09 9.2 7.2     3.4 4.5 1.12
 	                    m


 0       1     2       3     4    5
1.12 9.2 7.2     3.4 4.5 12.09
          m
		1.12>>p
	9.2>m	7.2


 0       1     2       3     4    5
9.2 1.12 7.2     3.4 4.5 12.09
                                m

		1.12>>p|m
	3.4>m	4.5>m

 0       1     2       3     4    5
9.2    4.5 7.2     3.4 1.12 12.09
                                 m

 0       1     2       3     4    5
1.12    4.5 7.2     3.4  9.2 12.09

 0       1     2       3     4    5
7.2    4.5 1.12     3.4  9.2 12.09

 0       1     2       3     4    5
7.2    4.5 1.12     3.4  9.2 12.09


 0       1     2       3     4    5
3.4    4.5 1.12    7.2  9.2 12.09




We start with the declaration of the class EditDistance.
minDistance Function:

This function calculates the minimum number of operations required to convert word1 to word2.
m and n represent the lengths of word1 and word2, respectively.
A 2D array dp of size (m+1) x (n+1) is created to store the minimum edit distances.
Initialize First Row and Column:

The first row of the dp array represents the case when word1 is empty. So, we initialize it with the values 0 to n (insertion operations).
The first column of the dp array represents the case when word2 is empty. So, we initialize it with the values 0 to m (deletion operations).
Fill in the DP Array:

We iterate over each character of word1 (indexed from 1 to m) and each character of word2 (indexed from 1 to n).
For each character pair (i, j), we compare word1.charAt(i - 1) with word2.charAt(j - 1):
If the characters are the same, we inherit the minimum edit distance from the previous characters, i.e., dp[i][j] = dp[i - 1][j - 1].
If the characters are different, we take the minimum of three operations:
Replacement: 1 + dp[i - 1][j - 1]
Deletion: 1 + dp[i - 1][j]
Insertion: 1 + dp[i][j - 1]
This step fills the dp array bottom-up, using previous subproblem solutions.
main Function:

In the main function, we provide example inputs for word1 and word2.
We then call the minDistance function to calculate the minimum number of operations.
Finally, we print the result.
This algorithm utilizes dynamic programming to build a table of subproblem solutions, allowing it to efficiently find the minimum number of operations to transform one word into another.

step by step:
Certainly, let's break down the dynamic programming process step by step without the initialization of the first row and first column.

The dynamic programming table dp is used to store the minimum edit distances between prefixes of word1 and word2.

Given word1 = "horse" and word2 = "ros", we have:

markdown
Copy code
  -   r   o   s
-  ?   ?   ?   ?
h  ?   ?   ?   ?
o  ?   ?   ?   ?
r  ?   ?   ?   ?
s  ?   ?   ?   ?
e  ?   ?   ?   ?
Each cell (i, j) in the table represents the minimum number of operations required to transform the prefix of word1 up to length i into the prefix of word2 up to length j.

The values in the cells need to be filled using dynamic programming to calculate the minimum number of operations.

Here's how the table is filled:

Initialize the first row and first column (without insertion and deletion operations) as i and j respectively:
markdown
Copy code
  -  r   o   s
-   0   1   2   3
h  1   0   0   0
o  2   0   0   0
r   3   0   0   0
s  4   0   0   0
e  5   0   0   0
Fill in the rest of the cells using dynamic programming:
For each cell (i, j), consider the characters at word1.charAt(i - 1) and word2.charAt(j - 1).
If they are equal, the minimum edit distance is the same as the previous diagonal cell (i - 1, j - 1).
If they are not equal, the minimum edit distance is the minimum of three adjacent cells (i - 1, j - 1), (i - 1, j), and (i, j - 1) plus one.
After filling in the table, you'll end up with the following:

markdown
Copy code
  -   r   o   s
-  0   1   2   3
h  1   1   2   3
o  2   2   1   2
r  3   2   2   2
s  4   3   3   2
e  5   4   4   3
The value in the bottom-right cell (m, n) (where m is the length of word1 and n is the length of word2) represents the minimum number of operations required to convert the entire word1 to word2, which is 2 in this case.




So, without the initializations of the first row and first column, the dynamic programming table is constructed using the principles of the edit distance algorithm. However, these initializations are crucial to ensure that the algorithm properly handles cases where one of the words is empty or has a prefix of length 0.



source>>horse
target>>ros


rorse
rose
ros


madam
mam

mdam
mam



    r o s
h  
o
r
s
e
       r   o  s
  [0, 1, 2, 3]
h[1, 1, 2, 3]
o[2, 2. 1, 2]
r [3, 2, 2, 2]
s[4, 3, 3, 2]
e[5, 4, 4, 3]

         m a m
    [0, 1, 2, 3]
m [1, 0, 1, 2]
a  [2, 1, 0, 1]
d  [3, 2, 1, 1]
a  [4, 3, 2, 2]
m [5, 4, 3, 2]



1.Next Greater Element
Given an array arr[ ] of integers, the task is to find the next greater element for each element of the array in order of their appearance in the array. Next greater element of an element in the array is the nearest element on the right which is greater than the current element.
If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.
Examples
Input: arr[] = [1, 3, 2, 4]
Output: [3, 4, 4, -1]
Explanation: The next larger element to 1 is 3, 3 is 4, 2 is 4 and for 4, since it doesn't exist, it is -1.
Input: arr[] = [6, 8, 0, 1, 3]
Output: [8, -1, 1, 3, -1]
Explanation: The next larger element to 6 is 8, for 8 there is no larger elements hence it is -1, for 0 it is 1 , for 1 it is 3 and then for 3 there is no larger element on right and hence -1.
Input: arr[] = [10, 20, 30, 50]
Output: [20, 30, 50, -1]
Explanation: For a sorted array, the next element is next greater element also exxept for the last element.
Input: arr[] = [50, 40, 30, 10]
Output: [-1, -1, -1, -1]
Explanation: There is no greater element for any of the elements in the array, so all are -1.




2.Frequencies in a Limited Array, You are given an array arr[] containing positive integers. The elements in the array arr[] range from 1 to n (where n is the size of the array), and some numbers may be repeated or absent. Your task is to count the frequency of all numbers in the range 1 to n and return an array of size n such that result[i] represents the frequency of the number i (1-based indexing).
Examples

Input: arr[] = [2, 3, 2, 3, 5]
Output: [0, 2, 2, 0, 1]
Explanation: We have: 1 occurring 0 times, 2 occurring 2 times, 3 occurring 2 times, 4 occurring 0 times, and 5 occurring 1 time.
Input: arr[] = [3, 3, 3, 3]
Output: [0, 0, 4, 0]
Explanation: We have: 1 occurring 0 times, 2 occurring 0 times, 3 occurring 4 times, and 4 occurring 0 times.
Input: arr[] = [1]
Output: [1]
Explanation: We have: 1 occurring 1 time, and there are no other numbers between 1 and the size of the array.

3. Mike has arranged a small party for the inauguration of his new startup. 
He has invited all of his fellow employees who are N in number. 
These employees are indexed with an array starting from 1 to N. 
In this startup, everyone knows each other’s salary. 
We will represent salary by an integer value. Mike has to arrange tables, 
where he will accommodate everyone. But he is a little thrifty in that, 
he wants to adjust everyone in as few tables as he can. 
Tables of various seating are available. 
Let’s say the cost of renting each table is K. 
All the employees have to seat in the order of the index. 
The only problem is that the employees with the same salary can get into arguments 
which can ruin the party.
Mike came across the term inefficiency of arrangement, 
which can be defined as the sum of the cost of tables + the total number of people 
getting into arguments. Given the number of employees, N, 
and their salaries in array a[ ], 
he wants to find the optimal inefficiency, 
i.e., the smallest possible value for the inefficiency of arranging the N employees

dp
0   1  2  3  4  5 
0   2  2  2  2 m
                      i

map
2->1
3->1
5->1



Quick Sort:						
i=s-1
pd=arr[end]
iteration:
	c=>s to e
		compare end and c
			i++
			swap between c and i

swap between arr[end] and i+1

return i+1>> pP


 0   1    2  3   4     5   6	
89,12,45,78,112,90,34				i=-1
s				 pd/e
i      c							i=0>> i++

		
 0   1    2  3   4     5   6	
12,89,45,78,112,90,34
   i	i+1			  pd/e			i++>> 1

                              

 0   1    2  3   4     5   6	
12,34,45,78,112,90,89

1>>pP

 0   1    2  3   4     5   6				i=0
12,34,45,78,112,90,89
       s                         e/pd
i      c
       i+1


 0   1    2  3   4     5   6				i=1
12,34,45,78,112,90,89
       s                        e/pd
	i         i                

 0   1    2  3   4     5   6				i=1
12,34,45,78,89,90,112
                      i+1>>pP

4>>pP


 1    2  3   4  				i=0
34,45,78,89
 s              e/pd
           i

 1    2  3   4  				
34,45,78,89



Find the given number is twisted prime or not
Note: A number is called Twisted Prime if it is a prime and its reverse is also a prime.
Example 1:
Input: N = 97
Output: 1
Explanation: 97 is a prime number. Its 
reverse 79 is also a prime number. Thus 
97 is a  twisted Prime and so, the answer is 1.
Example 2:
Input: N = 43
Output: 0
Explanation: 43 is a prime number but its 
reverse 34 is not a prime.So, 43 is not a 
twisted prime and thus, answer is 0.



Find index of extra element in arr1, You have given two sorted arrays arr1[] & arr2[] of distinct elements. The first array has one element extra added in between. Return the index of the extra element.
Note: 0-based indexing is followed.
Examples 
Input: a[] = [2,4,6,8,9,10,12], b[] = [2,4,6,8,10,12]
Output: 4
Explanation: In the first array, 9 is extra added and its index is 4.

Input: a[] = [3,5,7,8,11,13], b[] = [3,5,7,11,13]
Output: 3
Explanation: In the first array, 8 is extra and its index is 3.

Input: a[] = [3,5], b[] = [3]
Output: 1
Explanation: In the first array, 5 is extra and its index is 1.


Find single/ unique elements in an array, You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Your solution must run in O(log n) time and O(1) space.
 Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

0 1 2 3 4 5 6 7 8 9
1,1,2,3,3,4,4,5,8,8			mid=start+end-start/2>> mid=4
             m


0 1 2 3 4 
1,1,2,3,3,			mid=start+end-start/2>> mid=2
      m


0 1 2  
1,1,2,			mid=start+end-start/2>> mid=1
      m


Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
You must implement a solution with a linear runtime complexity and use only constant extra space.
 
Example 1:
Input: nums = [2,2,3,2]
Output: 3

Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99


2,2,3,2

u=0
d=0

num=2

u^n>> 

128 64 32 16 8 4 2 1
   0   0   0   0  0 0 0 1	>> u>>1
   0   0   0   0  0 0 1 0	>> n>>2
   0   0   0   0  0 0 0 0	>> d>>0
   0   0   0   0  0 0 1 1	>> u^n>> 3
   1   1   1   1  1 1 1 1	>> ~d
   0   0   0   0  0 0 1 1	>> u^n&~d>> 3
   0   0   0   0  0 0 0 0	>> d
   0   0   0   0  0 0 1 0	>> n
   0   0   0   0  0 0 1 0	>> d^n>> 2
   1   1   1   1  1 1 0 0	>> ~u
   0   0   0   0  0 0 0 0	>> d^n&~u>> 0   


Sort the Matrix Diagonally,A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].
Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.

Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]




Validate an IP Address,You are given a string s in the form of an IPv4 Address. Your task is to validate an IPv4 Address, if it is valid return true otherwise return false.

IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots, e.g., "172.16.254.1"

A valid IPv4 Address is of the form x1.x2.x3.x4 where 0 <= (x1, x2, x3, x4) <= 255. Thus, we can write the generalized form of an IPv4 address as (0-255).(0-255).(0-255).(0-255)

Note: Here we are considering numbers only from 0 to 255 and any additional leading zeroes will be considered invalid.

Examples :

Input: s = "222.111.111.111"
Output: true
Explanation: Here, the IPv4 address is as per the criteria mentioned and also all four decimal numbers lies in the mentioned range.
Input: s = "5555..555"
Output: false
Explanation: "5555..555" is not a valid. IPv4 address, as the middle two portions are missing.
Input: s = "0.0.0.255"
Output: false



Count palindrome words in a sentence, 
Input : Madam Arora teaches malayalam
Output : 3
The string contains three palindrome words (i.e.,
Madam, Arora, malayalam) so the count is three.

Input : Nitin speaks malayalam
Output : 2
The string contains two palindrome words (i.e.,
Nitin, malayalam) so the count is two.




Maximum number of robots within the budget,You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.
The total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.
Return the maximum number of consecutive robots you can run such that the total cost does not exceed budget.
Example 1:
Input: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25
Output: 3
Explanation: 
It is possible to run all individual and consecutive pairs of robots within budget.
To obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.
It can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.
Example 2:
Input: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19
Output: 0
Explanation: No robot can be run that does not exceed the budget, so we return 0.




apache-maven-3.9.9-bin.zip


extract

move extracted folder to desired location

set following environment path

1. JAVA_HOME=location of jdk
2. append PATH with your maven location
	PATH=location of maven



Java Project using maven:
	
Maven: building tool
	distributed structure
		project: artifact id
			src:
				main:
					java:
						package: group id
							source code
				resource:
					images,video,...
					application.properties
				test:
					java:
						test code
			target
			pom.xml
	deployment:
		archetypes: project type
		jar>> quickstart
		war>> webapp
		
		maven goal commands:
			mvn clean
			mvn package>> build jar/war
			mvn install>> deploy into local repository
			mvn deploy>> deploy into central mvnrepository.com
	dependency:
		central: mvnrepository.com


java -jar NAMEOFTHJAR.jar




Customer Requirement Specification:
FRS:
High Level Design: UI
Low Level Design: 
	coding and flow diagrams
	
	Design Patterns:
		singleton
		factory
		abstract factory
		Builder

Data storage:
	variable
	array
	collection
	file
	database


Problem Statement:
	MyBank Internet banking console/ menu driven application
		CurdRepository:
			save, update, delete, view
		Customer:
			save
			update
			delete
			view
		Account Details
			save
			update(w/d)
			delete
			view
		MiddleWare(FactoryClass)
			singleton
		Main:
			admin: user, password
			1. customer
			2. account
			3. any to logout