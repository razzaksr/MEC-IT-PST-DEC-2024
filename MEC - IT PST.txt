MEC - IT PST

Array rotation clock and anti-clock
rotation: 2
original:
    0         1         2      3             4          5          6                                                                              
[Node, Django, Vue, Express, Spring, Flask, Angular, 
    7           8
React, Hibernate]

anti-clock
Vue Express Spring Flask Angular React Hibernate Node Django

clock
React Hibernate Node Django Vue Express Spring Flask Angular



Equilibrium Index:
  0   1  2  3  4   5  6
{-7, 1, 5, 2, -4, 3, 0}	>> 0
               i
eq.index>> 3


0,-3,5,-4,-2,3,1,0
i

totalSum-= i >> 0
when partSum==totalSum
	i
partSum+=i>>



0,-3,5,-4,-2,3,1,0
eq.index>> 0

A chocolate factory is packing chocolates into packets. The chocolate packets here represent an array arrt of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array).
Input:
N = 8
arr = [1, 0, 2, 3, 0, 4, 5, 0]
Output:
[1, 2, 3, 4, 5, 0, 0, 0]

0  1  2  3  4  5  6  7
1, 2, 3, 4, 5, 4, 5, 0
                    i
                               c

c!=0
i=c

Airport security officials confiscated several items of the passengers at the security checkpoint. All the items have been dumped into a huge box (array). Each item possesses a certain amount of risk[0,1,2]. Here, the risk severity of the items represents an array[] of N number of integer values. The task here is to sort the items based on their levels of risk in the array. The risk values range from 0 to 2.
Input:
[1, 0, 2, 2, 1, 1, 2, 2, 1, 0, 2, 1, 0]
Output:
[0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]


0  1  2  3  4  5  6  7  8  9 10 11 12
1, 0, 2, 2, 1, 1, 2, 2, 1, 0, 2, 1, 0
s						 e
    m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 1, 2, 2, 1, 1, 2, 2, 1, 0, 2,  1,   0
     s						    e
        m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 2,  1,   2
     s					      e
        m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 1, 2, 1, 1, 2, 2, 1, 0, 2,  1,   2
         s				      e	      
             m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 2,  2,   2
         s				  e	      
                         m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 1, 1, 1, 1, 0, 2, 1, 2, 2,  2,   2
         s			  e	      
                         m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2,  2,   2
             s			  e	      
                             m

0  1  2  3  4  5  6  7  8  9 10 11 12
0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2,  2,   2
             s		     e	      
                             m


Finding missing min element in array
input:
0,1,3,4,5,6,7
output:
2

input:
0,2,3,5,6,7,8
output:
1

input:
0,1,2,3,4,6,7,8,9
output:
5


input:
1,2,3,4,6,7,8,9
output:
0


input:
5,10,8,11
output:
6

input:
98,454,12,86,13,89
output:
87



The Climbing Stairs problem
This is one of the most popular coding problems which can be solved using the Dynamic Programming technique. In this problem, you are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. The question is, in how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step.


Example 3:
Input: 5
Output: 8

1+1+1+1+1
2+2+1
1+2+2
2+1+2
1+1+1+2
1+1+2+1
1+2+1+1
2+1+1+1


3

poss>> 4>> 
0 1 2 3
0 1 2 3

step=4
0 1 2 3 4 
0 1 2 3 5

step=5
0 1 2 3 4 5
0 1 2 3 5 8


5
5-1		5-2
4
4-1	4-2>> 2
3
3-1	3-2
2	1>>3

5-1>> 5

3-1	3-2
2	1>> 3



1. Coin Change Problem

You are given an integer array coins representing denominations of coins and an integer amount representing the total amount of money. Your task is to determine the minimum number of coins required to make up the given amount. If it is not possible to make up the amount with the given denominations, return -1.

Constraints:

You can use as many coins of each denomination as needed.

You may assume that there are no negative denominations, and all denominations are distinct.

The input values are positive integers.


Input
coins = [1, 2, 5]  
amount = 11

Output
3

Input
coins = [1, 2, 5]  
amount = 7
Output
2



2. Given N gold wires, each wire has a length associated with it. At a time, only two adjacent small wires are assembled at the end of a large wire and the cost of forming is the sum of their length. Find the minimum cost when all wires are assembled to form a single wire.
Note: using greedy approach
Example:
[1, 1, 6, 6, 7, 8]
[1, 1, 6, 6, 7, 8]
[1, 6, 6, 7, 8, 8] 2
[1, 6, 7, 8, 8, 8] 9
[1, 7, 8, 8, 8, 8] 16
[1, 8, 8, 8, 8, 8] 24
[1, 9, 8, 8, 8, 8] 33
[1, 9, 8, 8, 8, 8]
Minimum cost to assemble all gold wires: 33



3. Dimond Pattern:
			
    #			
  ###		
#####		
 ###
   #

4. Given an array nums of positive integers of size N. Find all distinct digits present in nums.
 
Example 1:
Input: nums = [131, 11, 48]
Output: 1 3 4 8
Explanation: 1, 3, 4, and 8 are only distinct
digits that can be extracted from the numbers
of the array.
Example 2:
Input: nums = [111, 222, 333, 4444, 666]
Output: 1 2 3 4 6
Explanation: 1, 2, 3, 4, and 6 are only distinct
digits that can be extracted from the numbers
of the array.

5. Given an array arr[] of positive integers. Your task is to sort them so that the first part of the array contains odd numbers sorted in descending order, and the rest of the portion contains even numbers sorted in ascending order.
Examples:
Input: arr[] = [1, 2, 3, 5, 4, 7, 10]
Output: [7, 5, 3, 1, 2, 4, 10]
Explanation: 7 5 3 1 are odds in descending order and 2 4 10 are evens in ascending order.
Input: arr[] = [0, 4, 5, 3, 7, 2, 1]
Output: [7, 5, 3, 1, 0, 2, 4]
Explanation: 7 5 3 1 are odds in descending order and 0 2 4 are evens in ascending order.